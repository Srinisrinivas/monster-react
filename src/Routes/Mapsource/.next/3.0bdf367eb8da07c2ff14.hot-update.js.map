{"version":3,"sources":["webpack:///./pages/index.js?f7ee"],"names":["wrapperStyles","width","maxWidth","margin","cityScale","scaleLinear","domain","range","BasicMap","state","cities","fetchCities","bind","request","get","then","setState","res","data","scale","height","geographies","projection","map","geography","i","id","default","fill","stroke","strokeWidth","outline","hover","pressed","city","population"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAQA;AACA;;AAEA,IAAMA,gBAAgB;AACpBC,SAAO,MADa;AAEpBC,YAAU,GAFU;AAGpBC,UAAQ;AAHY,CAAtB;;AAMA,IAAMC,YAAY,qEAAAC,GACfC,MADe,CACR,CAAC,CAAD,EAAG,QAAH,CADQ,EAEfC,KAFe,CAET,CAAC,CAAD,EAAG,EAAH,CAFS,CAAlB;;IAIMC,Q;;;AACJ,sBAAc;AAAA;;AAAA;;AAEZ,UAAKC,KAAL,GAAa;AACXC,cAAQ;AADG,KAAb;AAGA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AALY;AAMb;;;;wCACmB;AAClB,WAAKD,WAAL;AACD;;;kCACa;AAAA;;AACZE,MAAA,6CAAAA,CACGC,GADH,CACO,yCADP,EAEGC,IAFH,CAEQ,eAAO;AACX,eAAKC,QAAL,CAAc;AACZN,kBAAQO,IAAIC;AADA,SAAd;AAGD,OANH;AAOD;;;6BACQ;AACP,aACE;AAAA;AAAA,UAAK,OAAOlB,aAAZ;AAAA;AAAA;AAAA;AAAA;AACE;AAAC,0EAAD;AAAA;AACE,8BAAkB,EAAEmB,OAAO,GAAT,EADpB;AAEE,mBAAO,GAFT;AAGE,oBAAQ,GAHV;AAIE,mBAAO;AACLlB,qBAAO,KADF;AAELmB,sBAAQ;AAFH,aAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AASE;AAAC,4EAAD;AAAA,cAAe,QAAQ,CAAC,CAAD,EAAG,EAAH,CAAvB,EAA+B,oBAA/B;AAAA;AAAA;AAAA;AAAA;AACE;AAAC,4EAAD;AAAA,gBAAa,WAAU,wBAAvB;AAAA;AAAA;AAAA;AAAA;AACG,wBAACC,WAAD,EAAcC,UAAd;AAAA,uBACCD,YAAYE,GAAZ,CAAgB,UAACC,SAAD,EAAYC,CAAZ;AAAA,yBACdD,UAAUE,EAAV,KAAiB,KAAjB,IACE,4DAAC,4DAAD;AACE,yBAAKD,CADP;AAEE,+BAAWD,SAFb;AAGE,gCAAYF,UAHd;AAIE,2BAAO;AACLK,+BAAS;AACPC,8BAAM,SADC;AAEPC,gCAAQ,SAFD;AAGPC,qCAAa,IAHN;AAIPC,iCAAS;AAJF,uBADJ;AAOLC,6BAAO;AACLJ,8BAAM,SADD;AAELC,gCAAQ,SAFH;AAGLC,qCAAa,IAHR;AAILC,iCAAS;AAJJ,uBAPF;AAaLE,+BAAS;AACPL,8BAAM,SADC;AAEPC,gCAAQ,SAFD;AAGPC,qCAAa,IAHN;AAIPC,iCAAS;AAJF;AAbJ,qBAJT;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFY;AAAA,iBAAhB,CADD;AAAA;AADH,aADF;AAgCE;AAAC,wEAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,mBAAKtB,KAAL,CAAWC,MAAX,CAAkBa,GAAlB,CAAsB,UAACW,IAAD,EAAOT,CAAP;AAAA,uBACpB;AAAC,2EAAD;AAAA,oBAAQ,KAAKA,CAAb,EAAgB,QAAQS,IAAxB;AAAA;AAAA;AAAA;AAAA;AACE;AACE,wBAAI,CADN;AAEE,wBAAI,CAFN;AAGE,uBAAG9B,UAAU8B,KAAKC,UAAf,CAHL;AAIE,0BAAK,qBAJP;AAKE,4BAAO,SALT;AAME,iCAAY,GANd;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,iBADoB;AAAA,eAAtB;AAFJ;AAhCF;AATF;AADF,OADF;AA+DD;;;;;;;;;EApFoB,gD;;eAuFR3B,Q;;;AAAf;;;;;;;;;;;;0BAjGMR,a;0BAMAI,S;0BAIAI,Q","file":"3.0bdf367eb8da07c2ff14.hot-update.js","sourcesContent":["\nimport React, { Component } from \"react\"\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Markers,\n  Marker,\n} from \"react-simple-maps\"\nimport { scaleLinear } from \"d3-scale\"\nimport request from \"axios\"\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\",\n}\n\nconst cityScale = scaleLinear()\n  .domain([0,37843000])\n  .range([1,25])\n\nclass BasicMap extends Component {\n  constructor() {\n    super()\n    this.state = {\n      cities: [],\n    }\n    this.fetchCities = this.fetchCities.bind(this)\n  }\n  componentDidMount() {\n    this.fetchCities()\n  }\n  fetchCities() {\n    request\n      .get(\"/static/world-most-populous-cities.json\")\n      .then(res => {\n        this.setState({\n          cities: res.data,\n        })\n      })\n  }\n  render() {\n    return (\n      <div style={wrapperStyles}>\n        <ComposableMap\n          projectionConfig={{ scale: 205 }}\n          width={980}\n          height={551}\n          style={{\n            width: \"30%\",\n            height: \"auto\",\n          }}\n          >\n          <ZoomableGroup center={[0,20]} disablePanning>\n            <Geographies geography=\"/static/world-50m.json\">\n              {(geographies, projection) =>\n                geographies.map((geography, i) =>\n                  geography.id !== \"ATA\" && (\n                    <Geography\n                      key={i}\n                      geography={geography}\n                      projection={projection}\n                      style={{\n                        default: {\n                          fill: \"#ECEFF1\",\n                          stroke: \"#607D8B\",\n                          strokeWidth: 0.75,\n                          outline: \"none\",\n                        },\n                        hover: {\n                          fill: \"#ECEFF1\",\n                          stroke: \"#607D8B\",\n                          strokeWidth: 0.75,\n                          outline: \"none\",\n                        },\n                        pressed: {\n                          fill: \"#ECEFF1\",\n                          stroke: \"#607D8B\",\n                          strokeWidth: 0.75,\n                          outline: \"none\",\n                        },\n                      }}\n                    />\n              ))}\n            </Geographies>\n            <Markers>\n              {\n                this.state.cities.map((city, i) => (\n                  <Marker key={i} marker={city}>\n                    <circle\n                      cx={0}\n                      cy={0}\n                      r={cityScale(city.population)}\n                      fill=\"rgba(255,87,34,0.8)\"\n                      stroke=\"#607D8B\"\n                      strokeWidth=\"2\"\n                    />\n                  </Marker>\n                ))\n              }\n            </Markers>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    )\n  }\n}\n\nexport default BasicMap\n\n\n\n// WEBPACK FOOTER //\n// ./pages/index.js"],"sourceRoot":""}